{
   "information_for_contributors": [
      "This grammer is based on https://github.com/jason-lang/atom-mas2j, which is available under the GNU LESSER GENERAL PUBLIC LICENSE ."
   ],
   "scopeName": "jason",
   "name": "Agent Speak Language file",
   "patterns": [
      { "include": "#comments" },   
      { "include": "#rule" },         
      { "include": "#label" },  
      { "include": "#event" },
      { "include": "#context" },
      { "include": "#body" },   
      { "include": "#module" },  
      {
         "match": "[a-z]\\w*\\b",
         "name": "support.type.atom.asl"
      },
      { "include": "#terms" },
      { "include": "#declaration" },
      { "include": "#annotation" }
   ],
   "repository": {
      "comments": {
         "patterns": [
            {
               "begin": "//",
               "end": "$",
               "name": "comment.line.double-slash.asl"
            },
            {
               "begin": "/\\*",
               "end": "\\*/",
               "name": "comment.block.asl"
            }
         ]
      },
      "constants": {
         "patterns": [
            {
               "match": "\\b(true|false)\\b",
               "name": "constant.character.language.asl"
            },
            {
               "match": "\\d+",
               "name": "constant.character.numeric.integer.asl"
            },
            {
               "match": "(\\d*\\.\\d+)([eE][+-]?[0-9]+)?",
               "name": "constant.character.numeric.float.asl"
            }
         ]
      },
      "keywords": {
         "patterns": [
            {
               "match": "\\b(begin|end)\\b",
               "name": "keyword.control.asl"
            }                                   
         ]
      },
      "operators":{
         "patterns":[
            {
               "match": "(\\+|-|\\*|<|>|=<|>=|\\\\==|==|=:=|=)",
               "name": "keyword.control.flow.asl"
            },
            {
               "match": "(\\|&\\||\\|\\|\\|)",
               "name": "keyword.control.flow.concurrency.asl"
            },
            {
               "match": "(~|&|\\||(not\\b))",
               "name": "keyword.control.flow.logic.asl"
            },            
            {
               "match": "(div|mod)\\b",
               "name": "keyword.control.flow.div.asl"
            }
         ]
      },
      "strings": {
         "patterns": [
            {
               "begin": "\"",
               "end": "\"",
               "name": "string.quoted.double.asl"
            }
         ]
      },
      "declaration":{
         "patterns": [         
            {
               "begin": "\\s*([!])",
               "beginCaptures": {
                  "0": {"name": "constant.character.numeric.asl"}
               },
               "end": "([\\.])",
               "endCaptures": {"0": {"name": "constant.character.numeric.asl"}},
               "patterns": [  
                  { "include": "#module" },
                  {
                     "match": "[a-z]\\w*\\b",
                     "name": "support.function.goal.asl"
                  },
                  {
                     "match": "[A-Z]\\w*\\b",
                     "name": "variable.other.asl"
                  },
                  { "include": "#terms" }
               ]
            }
         ]
      },
      "goals":{         
         "patterns": [         
            {
               "begin": "\\s*(![!]?|\\?[~]?)",
               "beginCaptures": {
                  "0": {"name": "constant.character.numeric.asl"}
               },
               "end": "(;|(?=[\\s*\\.]))",
               "endCaptures": {"0": {"name": "constant.character.numeric.asl"}},
               "patterns": [  
                  { "include": "#module" },
                  {
                     "match": "[a-z]\\w*\\b",
                     "name": "support.function.goal.asl"
                  },
                  {
                     "match": "[A-Z]\\w*\\b",
                     "name": "variable.other.asl"
                  },
                  { "include": "#terms" }
               ]
            }
         ]
      },
      "rule":{         
         "patterns": [         
            {
               "begin": "\\s*([\\:][-])",
               "beginCaptures": {
                  "0": {"name": "constant.character.numeric.asl"}
               },
               "end": "([\\.]\\s)",
               "endCaptures": {"0": {"name": "constant.character.numeric.asl"}},
               "patterns": [  
                  { "include": "#operators" },
                  { "include": "#module" },
                  { "include": "#action" },                  
                  {
                     "match": "[a-z]\\w*\\b",
                     "name": "support.type.atom.asl"
                  },                  
                  { "include": "#constants" },
                  { "include": "#variables" },
                  { "include": "#terms" }
               ]
            }
         ]
      },      
      "event":{
         "patterns":[
            {
               "name": "meta.function.plan.event",
               "begin": "\\s*([-][\\+]?|[\\+]|[\\^])([!]|[?][~]?)?",
               "beginCaptures": {
                  "0": {"name": "constant.character.numeric.asl"}
               },
               "end": "\\s*((?=([:]|[<-]))|[\\.])",
               "endCaptures": {"0": {"name": "constant.character.numeric.asl"}},
               "patterns": [  
                  { "include": "#module" },
                  {
                     "match": "[a-z]\\w*\\b",
                     "name": "entity.name.function.event.asl"
                  },
                  {
                     "match": "[A-Z]\\w*\\b",
                     "name": "variable.other.asl"
                  },
                  { "include": "#terms" }
               ]
            }
         ]
      },
      "body":{
         "patterns":[
            {
               "name": "meta.function.plan.body",
               "begin": "<-\\s*",
               "beginCaptures": { "0": { "name": "keyword.other.asl" } },
               "end": "\\s*(\\.\\s)",
               "endCaptures": { "0": { "name": "keyword.other.asl" } },
               "patterns": [
                  { "include": "#comments" },   
                  { "include": "#constants" },   
                  { "include": "#strings" },  
                  { "include": "#operators" },  
                  {
                     "match": "\\b(if|else|elif|while|for)\\b",
                     "name": "keyword.control.flow.asl"
                  },
                  { "include": "#goals" },
                  { "include": "#module" },
                  { "include": "#belief" },
                  { "include": "#action" },            
                  { "include": "#operations" },            
                  { "include": "#variables" }
               ]
            }
         ]
      },
      "context":{
         "patterns":[
            {
               "name": "meta.function.plan.context",
               "begin": ":\\s*",
               "beginCaptures": { "0": { "name": "keyword.other.asl" } },
               "end": "\\s*((?=[<-])|[\\.])",
               "endCaptures": { "0": { "name": "keyword.other.asl" } },
               "patterns": [    
                  { "include": "#comments" },   
                  { "include": "#constants" },   
                  { "include": "#strings" }, 
                  { "include": "#operators" },
                  {
                     "match": "[a-z][\\w]*",
                     "name": "support.type.atom.asl"
                  },
                  { "include": "#action" },
                  { "include": "#annotation" },  
                  { "include": "#variables" },  
                  { "include": "#terms" }          
               ]
            }
         ]
      },
      "annotation":{
         "patterns":[
            {
               "begin": "\\s*\\[",
               "end": "\\s*\\]",
               "patterns": [  
                  { "include": "#module" },
                  { "include": "#constants" },   
                  { "include": "#strings" }, 
                  {
                     "match": "[a-z][\\w]*",
                     "name": "support.type.atom.asl"
                  },
                  { "include": "#terms" },
                  { "include": "#variables" }
               ]
            }
         ]
      },
      "action":{
         "patterns":[            
            {
               "match": "\\.[a-z][\\w*\\.]*",
               "name": "support.function.internal_action.std.asl"
            },
            {
               "match": "([a-z]\\w*)(\\.[\\w]*)*",
               "name": "entity.name.function.internal_action.asl"
            },
            { "include": "#terms" },
            { "include": "#annotation" }                  
         ]
      },
      "belief":{
         "patterns":[
            {
               "begin": "\\s*([-][\\+]?|[\\+])([~])?",
               "beginCaptures": {
                  "0": {"name": "constant.character.numeric.asl"}
               },
               "end": "(;|(?=[\\s*\\.]))",
               "endCaptures": {"0": {"name": "constant.character.numeric.asl"}},
               "patterns": [  
                  { "include": "#module" },
                  {
                     "match": "[a-z]\\w*\\b",
                     "name": "entity.name.function.belief.asl"
                  },
                  {
                     "match": "[A-Z]\\w*\\b",
                     "name": "variable.other.asl"
                  },
                  { "include": "#annotation" },
                  { "include": "#terms" }
               ]
            } 
         ]
      },
      "module":{
         "patterns": [
            {
               "match": "([A-Z]|[a-z])[\\w]*::",
               "name": "support.type.module.asl"
            }         
         ]
      },
      "label": {
         "patterns": [
            {
               "begin": "\\s*([@])",
               "beginCaptures": {
                  "0": {"name": "constant.character.numeric.asl"}
               },
               "end": "\\s*(\\s)",
               "endCaptures": {"0": {"name": "constant.character.numeric.asl"}},
               "patterns": [  
                  { "include": "#module" },
                  {
                     "match": "[a-z]\\w*\\b",
                     "name": "support.type.atom.asl"
                  },
                  { "include": "#annotation" },
                  { "include": "#terms" }
               ]
            }
         ]
      },
      "terms": {
         "patterns": [
            {
               "begin": "\\s*\\(\\s*",
               "end": "\\s*\\)\\s*",
               "patterns": [   
                  { "include": "#module" },
                  { "include": "#strings" }, 
                  { "include": "#constants" },   
                  { "include": "#operators" },
                  {
                     "match": "[a-z][\\w]*",
                     "name": "support.type.atom.asl"
                  },
                  { "include": "#variables" }
               ]
            },
            {
               "match": "[@]\\w+\\b",
               "name": "support.function.annotation.asl"
            }           
         ]
      },
      "variables": {
         "patterns": [
            {
               "match": "\\b[A-Z]\\w*\\b",
               "name": "variable.other.asl"
            },
            {
               "match": "\\b_\\w*\\b",
               "name": "variable.other.asl"
            }
         ]
      }
   }
}
